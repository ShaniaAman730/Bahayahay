<!DOCTYPE html>
<html>
<head>
  <%= favicon_link_tag asset_path('favicon.ico') %>

  <title><%= content_for(:title) || "Bahayahay" %></title>
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <%= csrf_meta_tags %>
  <%= csp_meta_tag %>

  <%= turbo_include_tags %> 

  <%= stylesheet_link_tag "application", "data-turbo-track": "reload" %>
  <%= stylesheet_link_tag "style", media: "all" %>
  <%= javascript_importmap_tags %> 
  <!-- <#%= action_cable_meta_tag %> -->

  <!-- Bootstrap and icons -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">

  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.5/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-SgOJa3DmI69IUzQ2PVdRZhwQ+dy64/BUtbMJw1MZ8t5HZApcHrRKUc4W0kG879m7" crossorigin="anonymous">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.5/dist/js/bootstrap.bundle.min.js" integrity="sha384-k6d4wzSIapyDyv1kpU366/PK5hCdSbCRGRCMv+eplOQJWyd1fbcAu9OCUj5zNLiq" crossorigin="anonymous"></script>

  <!-- Trix -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/trix@2.0.0/dist/trix.css">
  <script src="https://cdn.jsdelivr.net/npm/trix@2.0.0/dist/trix.umd.min.js"></script>

  <!-- Leaflet Map -->
   <link
    rel="stylesheet"
    href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
    crossorigin=""
  />
  <script
    src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
    crossorigin=""
  ></script>

  <!-- Charts -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js@4.5.0/dist/chart.umd.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns@3.0.0/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
  <script src="https://www.gstatic.com/charts/loader.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chartkick@5.0.1/dist/chartkick.js"></script>

  <% if current_user %>
    <meta name="current-user-id" content="<%= current_user.id %>">
  <% end %>

</head>

<body class="d-flex flex-column min-vh-100">
  <div class="wrapper flex-grow-1">

    <%= render partial: "shared/navbar" %>

    <!-- Loader -->
    <div id="loader" class="loader-overlay">
      <%= image_tag "Bahayahay-loader.gif", alt: "Loading...", class: "loader-gif" %>
    </div>

    <% flash.each do |key, message| %>
      <div class="alert alert-<%= key == "notice" ? "success" : "danger" %> alert-dismissible fade show" role="alert">
        <%= message %>
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
      </div>
    <% end %>

    <% if current_user&.realtor? && !current_user.is_broker && current_user.realty.blank? %>
      <div class="alert alert-warning">
        You need to be part of a Realty before you can post listings. Please ask your broker to approve your application or submit another Realty application.
      </div>
    <% end %>

    <div class="mb-1"></div>
    <%= yield %>
    
  </div>

  <% unless content_for?(:hide_footer) %>
    <div class="mb-5"></div>
    <div class="mb-5"></div>
    <%= render "shared/footer" %>
  <% end %>

  <!-- Bootstrap 4 (jQuery + Popper + JS) -->
  <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/popper.js@1.12.9/dist/umd/popper.min.js" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/js/bootstrap.min.js" crossorigin="anonymous"></script>

  <!-- Custom scripts -->

  <!-- Image Gallery Modal -->
  <script>
    document.addEventListener("turbo:load", () => {
      const modal = document.getElementById("galleryModal");
      const modalImg = document.getElementById("modalImage");
      const modalCaption = document.getElementById("modalCaption"); // <-- new
      const images = document.querySelectorAll(".image-gallery img");

      let currentIndex = 0;

      if (modal && modalImg && images.length > 0) {
        images.forEach((img, index) => {
          img.addEventListener("click", () => {
            currentIndex = index;
            openModal(img.src, img.dataset.description);
          });
        });

        function openModal(src, description) {
          modalImg.src = src;

          // handle caption
          if (modalCaption) {
            if (description) {
              modalCaption.textContent = description;
              modalCaption.style.display = "block";
            } else {
              modalCaption.textContent = "";
              modalCaption.style.display = "none";
            }
          }

          modal.style.display = "flex";
          requestAnimationFrame(() => {
            modal.classList.add("show");
          });
        }

        window.changeImage = function (delta) {
          currentIndex = (currentIndex + delta + images.length) % images.length;
          const newImg = images[currentIndex];
          modalImg.src = newImg.src;

          if (modalCaption) {
            if (newImg.dataset.description) {
              modalCaption.textContent = newImg.dataset.description;
              modalCaption.style.display = "block";
            } else {
              modalCaption.textContent = "";
              modalCaption.style.display = "none";
            }
          }
        };

        window.closeModal = function () {
          modal.classList.remove("show");

          // wait for transition before hiding
          modal.addEventListener("transitionend", function handler() {
            modal.style.display = "none";
            modal.removeEventListener("transitionend", handler);
          });
        };
      }
    }, { once: true });
  </script>


  <!-- Photo Upload Limit -->
  <script>
    document.addEventListener("turbo:load", () => {
      const input = document.getElementById("photos_input");
      const maxFiles = 14;

      if (input) {
        input.addEventListener("change", () => {
          if (input.files.length > maxFiles) {
            alert(`You can only upload up to ${maxFiles} files.`);
            input.value = "";
          }
        });
      }
    }, { once: true });
  </script>

  <!-- Upload Size Limit -->
  <script>
    document.addEventListener("turbo:load", () => {
      document.addEventListener("change", function(event) {
        if (event.target.type === "file") {
          const maxSize = parseInt(event.target.dataset.maxSize, 10); // in bytes
          if (!maxSize) return; // skip inputs without a max_size

          let totalSize = 0;
          for (const file of event.target.files) {
            totalSize += file.size;
          }

          if (totalSize > maxSize) {
            let message;
            if (maxSize < 1024 * 1024) {
              // Show KB if less than 1 MB
              const maxInKB = (maxSize / 1024).toFixed(0);
              message = `Upload too large. Maximum allowed is ${maxInKB} KB total.`;
            } else {
              // Show MB otherwise
              const maxInMB = (maxSize / 1024 / 1024).toFixed(2);
              message = `Upload too large. Maximum allowed is ${maxInMB} MB total.`;
            }

            alert(message);
            event.target.value = ""; // clear file input
          }
        }
      });
    });
  </script>




  <!-- Trix Setup (no turbo binding needed) -->
  <script>
    window.Trix = window.Trix || {};
    window.Trix.config = { useShadowDOM: false };

    document.addEventListener("trix-file-accept", function(event) {
      event.preventDefault();
    });
  </script>

  <!-- Broker Checkbox Toggle -->
  <script>
    document.addEventListener("turbo:load", () => {
      const brokerCheckbox = document.querySelector("#user_is_broker");
      const brokerFields = document.querySelector("#broker-fields");

      if (brokerCheckbox && brokerFields) {
        function toggleBrokerFields() {
          brokerFields.style.display = brokerCheckbox.checked ? "none" : "block";
        }
        brokerCheckbox.addEventListener("change", toggleBrokerFields);
        toggleBrokerFields();
      }
    }, { once: true });
  </script>

  <!-- Custom Data Confirm -->
  <script>
    document.addEventListener("turbo:load", () => {
      document.body.addEventListener("click", (event) => {
        const target = event.target.closest("[data-confirm]");
        if (target) {
          const message = target.getAttribute("data-confirm");
          if (!confirm(message)) {
            event.preventDefault();
            event.stopImmediatePropagation();
          }
        }
      });
    }, { once: true });
  </script>

  <!-- Mark Review Event as Read -->
  <script>
    document.addEventListener("turbo:load", () => {
      document.querySelectorAll(".alert .btn-close").forEach(button => {
        button.addEventListener("click", () => {
          const eventId = button.getAttribute("data-event-id");
          if (eventId) {
            fetch(`/review_events/${eventId}/mark_as_read`, {
              method: "PATCH",
              headers: { "X-CSRF-Token": document.querySelector('meta[name="csrf-token"]').content }
            });
          }
        });
      });
    });
  </script>

   <!-- Bootstrap Re-init -->
  <script>
    document.addEventListener("turbo:load", () => {
      document.querySelectorAll('.dropdown-toggle').forEach((dropdownToggleEl) => {
        if (!bootstrap.Dropdown.getInstance(dropdownToggleEl)) {
          new bootstrap.Dropdown(dropdownToggleEl);
        }
      });
    });
  </script>


  <!-- Tooltip -->
  <script>
    document.addEventListener("turbo:load", () => {
      const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]')
      tooltipTriggerList.forEach(tooltipTriggerEl => {
        // destroy any existing tooltip before reinitializing
        if (bootstrap.Tooltip.getInstance(tooltipTriggerEl)) {
          bootstrap.Tooltip.getInstance(tooltipTriggerEl).dispose()
        }
        new bootstrap.Tooltip(tooltipTriggerEl)
      })
    }, { once: true }); 
  </script>

  <!-- Loader -->
   <script>
      document.addEventListener("turbo:load", () => {
      const loader = document.getElementById("loader");
      if (loader) loader.classList.add("hidden");
    }, { once: true });
  </script>

  <!-- Inbox -->
  <script>
    document.addEventListener("turbo:load", () => {
      const messages = document.getElementById("messages");

      function scrollToBottom() {
        messages.scrollTop = messages.scrollHeight;
      }

      // Scroll on initial load
      scrollToBottom();

      // Scroll whenever new content is added via Turbo Stream
      const observer = new MutationObserver(scrollToBottom);
      observer.observe(messages, { childList: true });
    }, { once: true });
  </script>

  <script>
  function initMap() {
    const manila = { lat: 14.5995, lng: 120.9842 };
    const map = new google.maps.Map(document.getElementById("map"), {
      zoom: 13,
      center: manila,
    });
    const marker = new google.maps.Marker({
      position: manila,
      map: map,
    });
  }
</script>

<!-- Leaflet JS -->
  <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
    integrity="sha256-pMh7zGvP3ScW9ZJkOmCj6bfZii/wGumprMC1lB2d5wM="
    crossorigin="">
  </script> 

<!-- Map Scripts -->
  <script>
    // FORM MAP (new/edit listing)
    document.addEventListener("turbo:load", function () {
      const mapElement = document.getElementById("map");
      if (mapElement && !mapElement.dataset.mapLoaded) {
        mapElement.dataset.mapLoaded = true;

        var map = L.map("map").setView([13.621, 123.1948], 13); // Default to Naga

        L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
          attribution: "© OpenStreetMap contributors"
        }).addTo(map);

        var marker;

        map.on("click", function (e) {
          var lat = e.latlng.lat;
          var lng = e.latlng.lng;

          if (marker) {
            marker.setLatLng([lat, lng]);
          } else {
            marker = L.marker([lat, lng]).addTo(map);
          }

          // Update hidden fields
          document.getElementById("listing_latitude").value = lat;
          document.getElementById("listing_longitude").value = lng;
        });
      }
    }, { once: true });
  </script>

  <!-- Action Cable 
   <#% if current_user %>
   <script>
    document.addEventListener("turbo:load", function setupNotifications() {
      // Prevent multiple initializations across Turbo visits
      if (window.notificationsInitialized) return;
      window.notificationsInitialized = true;

      // Determine WebSocket protocol
      const protocol = window.location.protocol === "https:" ? "wss://" : "ws://";
      const cable = new WebSocket(`${protocol}${window.location.host}/cable`);

      // Helper function to safely update badge
      function updateBadge(callback) {
        const badge = document.getElementById("inbox-badge");
        if (badge) callback(badge);
      }

      cable.onopen = () => {
        console.log("Connected to Action Cable");

        // Subscribe to NotificationsChannel
        const subscribeMsg = {
          command: "subscribe",
          identifier: JSON.stringify({ channel: "NotificationsChannel" })
        };
        cable.send(JSON.stringify(subscribeMsg));
      };

      cable.onmessage = (event) => {
        const data = JSON.parse(event.data);
        const message = data.message;
        if (!message) return;

        // New message notification
        if (message.type === "message") {
          showNotification(`💬 New message from ${message.from}: ${message.content}`);

          // Increment unread badge
          updateBadge(badge => {
            let count = parseInt(badge.textContent) || 0;
            badge.textContent = count + 1;
            badge.classList.remove("d-none");
          });
        }

        // Badge reset when inbox is opened
        if (message.type === "badge_reset") {
          updateBadge(badge => {
            badge.textContent = "0";
            badge.classList.add("d-none");
          });
        }
      };

      function showNotification(text) {
        // Truncate long text
        const truncated = text.length > 80 ? text.slice(0, 80) + "…" : text;

        // Create toast
        const notificationBox = document.createElement("div");
        notificationBox.textContent = truncated;
        notificationBox.className = "notification-toast";
        document.body.appendChild(notificationBox);

        // Play notification sound
        new Audio("audios/notification.mp3").play();

        // Auto-remove after 5 seconds
        setTimeout(() => notificationBox.remove(), 5000);
      }
    });
  </script>

  <style>
    .notification-toast {
      position: fixed;
      bottom: 20px;
      right: 20px;
      background: #28a745;
      color: #fff;
      padding: 10px 16px;
      border-radius: 8px;
      box-shadow: 0 2px 6px rgba(0,0,0,0.3);
      z-index: 9999;
      font-size: 14px;
      animation: slideIn 0.3s ease-out;
    }

    @keyframes slideIn {
      from { opacity: 0; transform: translateY(20px); }
      to { opacity: 1; transform: translateY(0); }
    }
  </style>
 <#% end %>
  -->

  <!-- Textarea Character Limits -->
  <script>
    function initCharLimits() {
      // Regular textareas
      document.querySelectorAll(".char-limit").forEach(textarea => {
        const counter = textarea.parentElement.querySelector(".char-counter");
        const max = parseInt(textarea.dataset.maxLength) || 1000;
        if (!counter) return;

        const updateCounter = () => {
          const count = textarea.value.length;
          counter.textContent = `${count}/${max} characters`;
          counter.classList.toggle("text-danger", count > max);
          counter.classList.toggle("text-muted", count <= max);
        };

        if (!textarea.dataset.charLimitInit) {
          textarea.addEventListener("input", updateCounter);
          textarea.dataset.charLimitInit = true;
        }

        updateCounter();
      });

      // ActionText (Trix editors)
      document.querySelectorAll("trix-editor.trix-limit").forEach(editor => {
        const counter = editor.parentElement.querySelector(".char-counter");
        const max = parseInt(editor.dataset.maxLength) || 1000;
        if (!counter) return;

        const updateCounter = () => {
          const text = editor.editor.getDocument().toString();
          const count = text.length;
          counter.textContent = `${count}/${max} characters`;
          counter.classList.toggle("text-danger", count > max);
          counter.classList.toggle("text-muted", count <= max);
        };

        if (!editor.dataset.charLimitInit) {
          editor.addEventListener("trix-change", updateCounter);
          editor.dataset.charLimitInit = true;
        }

        updateCounter();
      });
    }

    document.addEventListener("turbo:load", initCharLimits);
    document.addEventListener("DOMContentLoaded", initCharLimits);
  </script>



 </body>
</html>
